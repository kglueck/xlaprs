#!/usr/bin/python
#--------------------------------------------------------------------------
# Copyright 2003 William Orton - will@loopfree.net
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The license and distribution terms for any publically available version
#    or derivative of this code cannot be changed.  i.e. this code cannot 
#    simply be copied and put under another distribution license
#    [including, but not limited to, the GNU Public License.]
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# --------------------------------------------------------------------------

# This program tests the geoid.bin binary file generated by
# the egm96bin program by doing a "stupid" non-interpolating
# match of the lat/long testpoint to a point in the datafile.


import struct

test = [
(35.268662, -120.662874),
(38.628155,  269.779155),
(-14.621217, 305.021114),
(46.874319,  102.448729),
(-23.617446, 133.874712),
(38.625473,  359.999500),
(-00.466744, 0.002300)
]

datfile = "geoid.bin"


dfile = open(datfile, 'rb')


cols = 360 * 4 + 1  #0  -> 360 degrees of lon in .25deg increments
rows = 180 * 4 + 1  #90 -> -90 degrees of lat in .25deg increments
pointsize = 4       #32-bit floats


for point in test:
   (lat, lon) = point
   rowsdown = int(  ( -lat + 90.0) * 4.0    )

   if lon < 0: lon += 360.0
   colsover = int(   lon * 4.0 )
   index = rowsdown * cols + colsover

#   print "index:" 

   dfile.seek(pointsize * index)
   f = dfile.read(pointsize)
   val = struct.unpack("f", f)[0]
   print rowsdown, colsover, lat, lon, val

dfile.close()

